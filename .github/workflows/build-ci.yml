name: Build CI

on:
  workflow_call:

jobs:
  build:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Ignore lines containing 'version = "x.x.x"' and hash the rest of Cargo.lock
      - name: Generate custom cache key
        id: cargo-hash
        run: |
          grep -v '^version = ' src-tauri/Cargo.toml | shasum -a 256 | awk '{ print $1 }' > cargo_hash.txt
          echo "CARGO_CACHE_KEY=$(cat cargo_hash.txt)" >> $GITHUB_ENV
          echo "::set-output name=CARGO_CACHE_KEY::$(cat cargo_hash.txt)"

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ steps.cargo-hash.outputs.CARGO_CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo git index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ steps.cargo-hash.outputs.CARGO_CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache Cargo target directory
        uses: actions/cache@v4
        with:
          path: src-tauri/target
          key: ${{ runner.os }}-cargo-target-${{ matrix.target }}-${{ steps.cargo-hash.outputs.CARGO_CACHE_KEY }}-$(rustc --version)
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Cache Tauri CLI (cross-platform)
        id: tauri-cli-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-tauri
            ~/.cargo/bin/cargo-tauri.exe
          key: ${{ runner.os }}-tauri-cli-${{ steps.cargo-hash.outputs.CARGO_CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-tauri-cli-

      - name: Cache pnpm store and modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Node Module
        run: |
          npm i pnpm -g
          echo "C:/Users/runneradmin/AppData/Roaming/npm" >> $GITHUB_PATH
          pnpm i

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "22.2"

      - name: Install Tauri CLI if not cached
        run: cargo install tauri-cli --version ^2.0.0
        if: steps.tauri-cli-cache.outputs.cache-hit != 'true'

      - name: Build
        run: cargo tauri build
        working-directory: ./src-tauri

      - name: Create output directory
        run: mkdir output

      - name: Copy files to output
        run: cp src-tauri/target/release/bundle/nsis/*.exe output/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: output/*.exe
